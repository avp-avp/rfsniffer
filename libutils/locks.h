#ifndef __LOCKS_H
#define __LOCKS_H
/*******************************************
* Module: ������ � ������������
********************************************/

#include "libutils.h"

#ifdef WIN32
	#define WAIT_INFINITE INFINITE
#else
	#define WAIT_INFINITE 0xFFFFFFFL
	typedef unsigned long DWORD;
#endif
/*******************************************
*
* Class:+ CLock
*
* ����� CLock
*
********************************************/
class LIBUTILS_API CLock
{
#ifdef WIN32
	CRITICAL_SECTION cs;
#else
	pthread_mutexattr_t cs_attr;
	pthread_mutex_t cs;
#endif

public:
/*******************************************
*
* Section:! ������������
*
* ������������ ������ CLock
*
********************************************/
/*******************************************
*
* Name: CLock
*
* ����������� �� ��������� 
*
********************************************/
	CLock();
	~CLock();
/*******************************************
*
* Section:! ������
*
* ������ ������ CLock
*
********************************************/
/*******************************************
*
* Name: Lock
*
* ����� ������������� ����������
*
********************************************/
	void Lock();
/*******************************************
*
* Name: Unlock
*
* ����� ������� ����������
*
********************************************/
	void Unlock();
};

/*******************************************
*
* Class:+ CLockHelper
*
* ����� CLockHelper
*
********************************************/
class LIBUTILS_API CLockHelper
{
/*******************************************
*
* Section:! ��������
*
* �������� ������ CLockHelper
*
********************************************/
/*******************************************
*
* Name: m_lock
*
* CLock* <b>m_lock</b> - ������ �� ������ ����������
*
********************************************/
	CLock* m_lock;
public:
/*******************************************
*
* Section:! ������������
*
* ������������ ������ CLockHelper
*
********************************************/
/*******************************************
*
* Name: CLockHelper
*
* ����������� �� ������ ����������
*
********************************************/
	CLockHelper(CLock* lock);
	~CLockHelper();
};

/*******************************************
*
* Class:+ CEvent
*
* ����� CEvent
*
********************************************/
class LIBUTILS_API CEvent
{
#ifdef WIN32
	HANDLE m_Event;
#else
   pthread_cond_t m_Cond;
   pthread_mutex_t m_Mutex;
   bool m_bSignaled;
//	#error PLATFORM NOT SUPPORTED
#endif

public:
/*******************************************
*
* Section:! ������������
*
* ������������ ������ CEvent
*
********************************************/
/*******************************************
*
* Name: CEvent
*
* ����������� �� ��������� 
*
* ���������: 
*		*InitState* - �������� ��������� (�� ��������� - <b>FALSE</b>)
*
********************************************/
	CEvent(bool InitState=false);
	~CEvent();

/*******************************************
*
* Section:! ������
*
* ������ ������ CLock
*
********************************************/
/*******************************************
*
* Name: Wait
*
* ����� ��������� �������� ��������� ��������� ������� � ������� ���������� �������
*
* ���������: 
*		*ms* - ����� �������� (������������)
*
********************************************/
	bool Wait(DWORD ms);
/*******************************************
*
* Name: Signal
*
* ����� �������� ��������� ������� �� "����������"
*
********************************************/
	bool Signal();
/*******************************************
*
* Name: Reset
*
* ����� ���������� �������
*
********************************************/
	bool Reset();
};

#define LOCK(x) CLockHelper LockHelper##x(&x);

#endif
